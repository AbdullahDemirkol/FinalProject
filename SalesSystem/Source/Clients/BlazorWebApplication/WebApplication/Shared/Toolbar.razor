
<!-- NAVBAR BİTİŞ -->


@*@if (isLoggedIn)
{
    <a href="basket" class="ml-md-auto" @onclick="@CheckBasket">@identityService.GetUsername() - Basket(@basketItemCount)</a>
    <a class="ml-md-auto" @onclick=@GoLogoutPage>Logout</a>
}
else
{
    <a class="ml-md-auto" @onclick=@GoLoginPage>Login</a>
}*@

@code {

    private bool isLoggedIn = false;
    private int basketItemCount;

    [Inject]
    IIdentityService identityService { get; set; }

    [Inject]
    IBasketService basketService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    StateManager stateManager { get; set; }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            stateManager.StateChanged += async (source, property) => await StateManager_StateChanged(source, property);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        await calculateItemCount();
        //await base.OnInitializedAsync();
    }


    private async Task<int> calculateItemCount()
    {
        isLoggedIn = identityService.IsLoggedIn;
        if (isLoggedIn)
        {
            int count;

            var basket = await basketService.GetBasket();
            if (basket.BasketItems != null)
            {
                count = basket.TotalQuantity();
                /*basket.BasketItems.Sum(i => i.Quantity)*/
            }
            else
            {
                count = 0;
            }
            Console.WriteLine(count);
            basketItemCount = count;
            return count;
        }
        return 0;
    }

    private async Task StateManager_StateChanged(ComponentBase component, string property)
    {
        if (component == this)
        {
            return;
        }
        if (property == "increase")
        {
            basketItemCount++;
        }
        else if (property == "checkBasket")
        {
            await calculateItemCount();
        }
        else if (property == "login")
        {
            await calculateItemCount();
        }
        await InvokeAsync(StateHasChanged);
    }
    private void GoLoginPage()
    {
        navigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}");
    }
    private void GoLogoutPage()
    {
        navigationManager.NavigateTo($"logout?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}");
    }
    private void CheckBasket()
    {
        stateManager.UpdateCard(this);
    }
}

