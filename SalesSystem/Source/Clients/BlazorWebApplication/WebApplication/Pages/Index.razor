
@page "/"
@page "/Index"
<!-- home page slider -->
<div class="homepage-slider">
    <!-- single home slider -->
    <div class="single-homepage-slider homepage-bg-1">
        <div class="container">
            <div class="row">
                <div class="col-md-10 offset-lg-1 text-center">
                    <div class="hero-text">
                        <div class="hero-text-tablecell">
                            <p class="subtitle">E-Ticaret Websitesi</p>
                            <h1>Hoşgeldiniz!</h1>
                            <div class="hero-btns">
                                <a href="/Product" class="boxed-btn">Alışverişe Başlayın</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- single home slider -->
    <div class="single-homepage-slider homepage-bg-2">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 offset-lg-1 text-center">
                    <div class="hero-text">
                        <div class="hero-text-tablecell">
                            <p class="subtitle">E-Ticaret Websitesi</p>
                            <h1>Sorun Mu Yaşıyorsunuz?</h1>
                            <div class="hero-btns">
                                <a href="/About" class="boxed-btn">İletişime Geçin</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end home page slider -->
<!-- features list section -->
<div class="list-section pt-80 pb-80">
    <div class="container">

        <div class="row">
            <div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
                <div class="list-box d-flex align-items-center">
                    <div class="list-icon">
                        <i class="fas fa-shipping-fast"></i>
                    </div>
                    <div class="content">
                        <h3>Ücretsiz Kargo</h3>
                        <p>Siparişlerinizin Kargoları Bedava</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
                <div class="list-box d-flex align-items-center">
                    <div class="list-icon">
                        <i class="fas fa-phone-volume"></i>
                    </div>
                    <div class="content">
                        <h3>7/24 Destek</h3>
                        <p>Her Saat Ulaşılabilir Destek</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6">
                <div class="list-box d-flex justify-content-start align-items-center">
                    <div class="list-icon">
                        <i class="fas fa-sync"></i>
                    </div>
                    <div class="content">
                        <h3>İade</h3>
                        <p>1 Hafta İçerisinde Geri Ödeme</p>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<!-- end features list section -->
<!-- product section -->
<div class="product-section mt-150 mb-150" style="padding-top: 30px;">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2 text-center">
                <div class="section-title">
                    <h3><span class="orange-text">Tüm</span> Ürünlerimiz</h3>
                </div>
            </div>
        </div>
        <div class="row" style="height:auto;">
            @if (_products != null)
            {
                @foreach (var productItem in _products)
                {
                    <WebApplication.Pages.Product.Products.ProductView ProductItem="productItem" OnClick="()=>AddToCart(productItem)" />
                }

            }
        </div>
        <div class="col-md-12" style="text-align:center;">
            <a href="/Product"><h4>Diğer Ürünlerimiz --></h4></a>
        </div>

    </div>
</div>
<!-- end product section -->
@code{
    [Inject]
    public IJSRuntime jsRuntime { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }
    [Inject]
    StateManager stateManager { get; set; }
    [Inject]
    IProductService productService { get; set; }
    [Inject]
    IIdentityService identityService { get; set; }
    [Inject]
    public IBasketService basketService { get; set; }
    IEnumerable<Entity.Concrete.Product.Product> _products=new List<Entity.Concrete.Product.Product>() ;
    int _productCount { get; set; }

    bool isSuccess { get; set; }
    string message { get; set; }
    bool showNotification { get; set; } = false;

    public void AccessControl()
    {
        bool isLoggedIn = identityService.IsLoggedIn;
        if (isLoggedIn)
        {
            var stringDate = identityService.GetUserExpiration();
            DateTime loggedTime = DateTime.Parse(stringDate);
            DateTime nowDateTime = DateTime.Now;

            TimeSpan timeDifference = loggedTime - nowDateTime;

            if (timeDifference.TotalMinutes < -5)
            {
                identityService.Logout();
                stateManager.LoginChanged(this);
                //navigationManager.NavigateTo($"logout?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
            }
        }
    }
    protected async override void OnInitialized()
    {
        AccessControl();
        await GetProducts();
    }
    protected async Task GetProducts()
    {
        var inComingProducts = await productService.GetProductsItem(0,0,0,0, 3);
        _products = inComingProducts.Data;
        _productCount = inComingProducts.Count;
        stateManager.UpdateContent(this, "HomePage");
    }
    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("myFunction");
            stateManager.StateChanged += async (source, property) => await StateManager_StateChanged(source, property);
        }
    }
    private async Task StateManager_StateChanged(ComponentBase component, string property)
    {
        if (property == "HomePage")
        {
            await InvokeAsync(StateHasChanged);
        }

    }
    public async Task AddToCart(Entity.Concrete.Product.Product product)
    {
        if (!identityService.IsLoggedIn)
        {
            navigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
            return;
        }
        var addResult = await basketService.AddItemToBasket(product.Id, 1);

        showNotification = true;
        if (addResult)
        {
            isSuccess = true;
            message = "Ürün başarıyla eklendi. Miktar: 1";
        }
        else
        {
            isSuccess = false;
            message = "Ürün ekleme işleminde hata oluştu!";
        }
        stateManager.UpdateContent(this, "HomePage");

        // 2 saniye sonra bildirimi kaldır
        await Task.Delay(2000).ContinueWith(t =>
        {
            isSuccess = false;
            message = "";
            showNotification = false;
            stateManager.UpdateContent(this, "HomePage");
        });


    }
    //private async Task StateManager_StateChanged(ComponentBase component, string property)
    //{
    //    //jSObjectReference = await jsRuntime.InvokeAsync<IJSObjectReference>("import", navigationManager.BaseUri + "assets/js/main.js");
    //    await InvokeAsync(StateHasChanged);

    //}
}