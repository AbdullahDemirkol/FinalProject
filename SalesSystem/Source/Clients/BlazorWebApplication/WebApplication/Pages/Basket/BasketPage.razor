
@*@page "/basketPage"*@
<div class="card">
        <div class="row">
            <div class="col-md-8 cart">
                <div class="title">
                    <div class="row">
                        <div class="col">
                            <h4><b>Shopping Cart</b></h4>
                        </div>
                        <div class="col align-self-center text-right text-muted">@basketModel.BasketItems.Count items</div>
                    </div>
                </div>
                @if (basketModel.BasketItems.Any())
                {
                    foreach (var basketItem in basketModel.BasketItems)
                    {
                        <div class="row border-top border-bottom">
                            <div class="row main align-items-center">
                                @{ string pictureUrl = "http://localhost:5001/pics" + basketItem.PictureUrl;}
                                <div class="col-2"><img class="img-fluid" src="@pictureUrl" /></div>
                                <div class="col">
                                    <div class="row text-muted">
                                        @basketItem.ProductName
                                    </div>
                                    <div class="col">
                                        <a href="#" class="border">@basketItem.Quantity</a>
                                    </div>
                                    <div class="col">
                                        $@basketItem.UnitPrice.ToString("N2")
                                        <span @onclick="@(async()=>await RemoveItemFromList(basketItem))">
                                            <button type="button" class="close" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="back-to-shop">
                                <a href="product">&leftarrow;</a>
                                <span class="text-muted">Back to shop</span>
                            </div>
                        </div>
                    }
                }
                <div class="col-md-4 summary">
                    <div>
                        <h5><b>Summary</b></h5>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col" style="padding-left:0;">
                            ITEMS @basketModel.BasketItems.Count
                        </div>
                        <div class="col text-right">
                            $@basketModel.BasketItems.Sum(p => p.UnitPrice * p.Quantity)
                        </div>
                    </div>
                    <div class="row" style="border-top:1px solid rgba(0,0,0,0.1); padding: 2vh 0;">
                        <div class="col">
                            Total Price
                        </div>
                        <div class="col text-right">
                            @basketModel.BasketItems.Sum(p => p.UnitPrice * p.Quantity)
                        </div>
                    </div>
                    <div class="btn" @onclick="@(()=>CheckOut())">
                        CheckOut
                    </div>
                </div>
            </div>
        </div>
    </div>

@code {
    private bool isLoggedIn = false;

    CustomerBasket basketModel = new CustomerBasket();
    [Inject]
    IBasketService basketService { get; set; }
    [Inject]
    IIdentityService identityService { get; set; }
    [Inject]
    StateManager stateManager { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    protected async override Task OnInitializedAsync()
    {
        isLoggedIn = identityService.IsLoggedIn;
        if (isLoggedIn)
        {
            basketModel = await basketService.GetBasket();
        }
        else
        {
            navigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
        }
    }
    void CheckOut()
    {
        navigationManager.NavigateTo("/create-order");
        Console.WriteLine("navigating create-order");
    }
    async Task RemoveItemFromList(BasketItem item)
    {
        basketModel.BasketItems.Remove(item);
        basketModel =await basketService.UpdateBasket(basketModel);
        stateManager.UpdateCard(this);
    }


}
