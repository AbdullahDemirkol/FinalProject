@page  "/Basket"

@if (identityService.IsLoggedIn)
{
    <!-- breadcrumb-section -->
    <div class="breadcrumb-section breadcrumb-bg">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2 text-center">
                    <div class="breadcrumb-text">
                        <p>E-Ticaret Websitesi</p>
                        <h1>Sepet</h1>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- end breadcrumb section -->
    <!-- cart -->
    <div class="cart-section mt-150 mb-150">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-md-12">
                    <div class="cart-table-wrap">
                        <table class="cart-table">
                            <thead class="cart-table-head">
                                <tr class="table-head-row">
                                    <th class="product-remove"></th>
                                    <th class="product-image">Ürün Resimi</th>
                                    <th class="product-name">Ürün Adı</th>
                                    <th class="product-price">Ürün Birim Fiyatı</th>
                                    <th class="product-total">Toplam Ürün Adeti</th>
                                    <th class="product-price">Toplam Ürün Fiyatı</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (basketModel.BasketItems.Any())
                                {
                                    @foreach (var basketItem in basketModel.BasketItems)
                                    {

                                <tr class="table-body-row">
                                    <td class="product-remove"><a @onclick="@(async()=>await RemoveItemFromList(basketItem))"><i class="far fa-window-close"></i></a></td>
                                    <td class="product-image">
                                        @if (basketItem.PictureUrl != null)
                                        {
                                            <img src="@("http://localhost:5001/pics" + basketItem.PictureUrl)" alt="">
                                        }
                                        else
                                        {
                                            <img src="assets/img/default-product.png" alt="">
                                        }
                                    </td>
                                    <td class="product-name">@basketItem.ProductName</td>
                                    <td class="product-price">@basketItem.UnitPrice.ToString("N2") TL</td>
                                    <td class="product-total">@basketItem.Quantity</td>
                                    <td class="product-quantity">@((basketItem.Quantity * basketItem.UnitPrice).ToString("N2"))</td>
                                </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="total-section">
                        <table class="total-table">
                            <thead class="total-table-head">
                                <tr class="table-total-row">
                                    <th>Toplam</th>
                                    <th>Birim</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="total-data">
                                    <td><strong>Adet: </strong></td>
                                    <td>@basketModel.TotalQuantity()</td>
                                </tr>
                                @*<tr class="total-data">
                                    <td><strong>Shipping: </strong></td>
                                    <td>$45</td>
                                </tr>*@
                            <tr class="total-data">
                                <td><strong>Fiyat: </strong></td>
                                <td>@basketModel.TotalUnitPrice() TL</td>
                            </tr>
                            </tbody>
                        </table>
                        <div class="cart-buttons">
                            <a @onclick="(()=>ReloadPage())" class="boxed-btn">Sepeti Yenile</a>
                            @if (basketModel.BasketItems.Count > 0)
                            {
                                <a class="boxed-btn black" @onclick="@(()=>CheckOut())">Alışverişi Tamamla</a>
                            }
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <!-- end cart -->
}
else
{
    <p>giriş başarısız</p>
}
@code {
    private bool isLoggedIn = false;

    CustomerBasket basketModel = new CustomerBasket();
    [Inject]
    IBasketService basketService { get; set; }
    [Inject]
    IIdentityService identityService { get; set; }
    [Inject]
    StateManager stateManager { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }
    [Inject]
    public IJSRuntime jsRuntime { get; set; }
    public void AccessControl()
    {
        isLoggedIn = identityService.IsLoggedIn;
        if (isLoggedIn)
        {
            var stringDate = identityService.GetUserExpiration();
            DateTime loggedTime = DateTime.Parse(stringDate);
            DateTime nowDateTime = DateTime.Now;

            TimeSpan timeDifference = loggedTime - nowDateTime;

            if (timeDifference.TotalMinutes < -5)
            {
                identityService.Logout();
                isLoggedIn = identityService.IsLoggedIn;
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
        AccessControl();
        if (!isLoggedIn)
        {
            await jsRuntime.InvokeVoidAsync("myFunction");
            navigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
        }
        else
        {
            basketModel = await basketService.GetBasket();
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("myFunction");
        }
    }

    void CheckOut()
    {
        navigationManager.NavigateTo("/CheckOut");
    }
    async Task RemoveItemFromList(BasketItem item)
    {
        basketModel.BasketItems.Remove(item);
        basketModel = await basketService.UpdateBasket(basketModel);
        stateManager.UpdateCard(this);
    }
    private void UpdateProductQuantity(ChangeEventArgs e,BasketItem basketItem)
    {
        if (Convert.ToInt32(e.Value) > 0)
        {
            basketItem.Quantity = Convert.ToInt32(e.Value);
        }
        else
        {
            basketItem.Quantity = 1;
        }
    }
    async Task ReloadPage()
    {
        basketModel = await basketService.UpdateBasket(basketModel);
        stateManager.UpdateContent(this, "basketPage");
    }

}
