@page  "/PaymentMethods"
    <!-- breadcrumb-section -->
<div class="breadcrumb-section breadcrumb-bg">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2 text-center">
                <div class="breadcrumb-text">
                    <p>E-Ticaret Websitesi</p>
                    <h1>Ödeme Yöntemlerim</h1>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end breadcrumb section -->
<div class="forAccountBackground">

    <div class="forAccountBackgroundPadding"></div>
    <div class="container emp-profile">

        <div class="row">
            <div class="col-md-8">
                <div class="profile-head">
                    <h5>
                        @_userModel.Username
                    </h5>
                    <h6>
                        @_userModel.FirstName @_userModel.LastName
                    </h6>
                    <p class="proile-rating">Toplam Ödeme Yöntemi Adeti : <span>@_paymentMethodModels.Count</span></p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-6">
                        <select id="StatusSelect" class="statusSelect" @onchange="OptionSelected">
                            <option value="0">Tümü</option>
                            @foreach (var cardType in _cardTypeModels)
                            {
                                <option value="@cardType.Id">@cardType.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <input type="submit" class="profile-edit-btn list-btn" @onclick="()=>GetPaymentMethodByCardType()" value="Listele" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        <input type="submit" class="profile-edit-btn add-button" data-toggle="modal" data-target="#exampleModal" value="Ödeme Yöntemi Ekle">
                    </div>
                </div>
            </div>
        </div>
        @if (_paymentMethodModels.Count != 0)
        {

            @foreach (var _paymentMethodModel in  _paymentMethodModels.Data)
            {
                <div class="paymentMethodCard">
                    <div class="row" style="margin-right: -5px;">
                        <div class="col-md-12 paymentMethodHead">
                            <h5>Ödeme Yöntemi</h5>
                        </div>
                    </div>
                    <div class="row" style="margin-top: 15px;">
                        <div class="col-md-9">
                            <div class="tab-content profile-tab" id="myTabContent">
                                <div class="tab-pane fade show active" role="tabpanel" aria-labelledby="home-tab">
                                    <div class="row">
                                        <div class="col-md-5">
                                            <label>Kart No</label>
                                        </div>
                                        <div class="col-md-7">
                                            <p>@_paymentMethodModel.CardNumber.Substring(0, 4) **** **** @_paymentMethodModel.CardNumber.Substring(_paymentMethodModel.CardNumber.Length - 4)</p>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-5">
                                            <label>Kart Üstündeki İsim</label>
                                        </div>
                                        <div class="col-md-7">
                                            <p>@_paymentMethodModel.CardHolderName</p>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-5">
                                            <label>Kart Son Kullanma Tarihi</label>
                                        </div>
                                        <div class="col-md-7">
                                            <p>@_paymentMethodModel.CardExpirationShortFormat()</p>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-5">
                                            <label>Kart Güvenlik Numarası</label>
                                        </div>
                                        <div class="col-md-7">
                                            <p>**@_paymentMethodModel.SecurityNumber.Substring(_paymentMethodModel.SecurityNumber.Length - 1)</p>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-5">
                                            <label>Kart Türü</label>
                                        </div>
                                        <div class="col-md-7">
                                            <p>@_cardTypeModels.FirstOrDefault(p => p.Id == _paymentMethodModel.CardTypeId).Name</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <input type="submit" class="profile-edit-btn" @onclick="()=>DeletePaymentMethod(_paymentMethodModel.Id)" value="Kartı Sil" />
                        </div>

                    </div>

                </div>
            }
            <div class="row">
                <div class="col-lg-12 text-center">

                    <div class="pagination-wrap">
                        <ul>

                            @if (CurPage > 1)
                            {
                                @if (3 < Math.Ceiling(Convert.ToDouble(_paymentMethodModels.Count) / 6))
                                {
                                    <li><a @onclick="()=>PrevPage(CurCardType)">Önceki</a></li>
                                }
                                <li><a @onclick="()=>Pagination(CurPage-2,CurCardType)">@(CurPage-1)</a></li>
                            }
                            <li><a class="active" @onclick="()=>Pagination(CurPage-1,CurCardType)">@(CurPage)</a></li>
                            @if (CurPage < Math.Ceiling(Convert.ToDouble(_paymentMethodModels.Count) / 6))
                            {
                                <li><a @onclick="()=>Pagination(CurPage,CurCardType)">@(CurPage+1)</a></li>
                                @if (3 < Math.Ceiling(Convert.ToDouble(_paymentMethodModels.Count) / 6))
                                {
                                    <li><a @onclick="()=>NextPage(CurCardType)">Sonraki</a></li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }


    </div>
    <div class="forAccountBackgroundPadding"></div>
    <!-- End My Account -->

   <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Yeni Ödeme Yöntemi Ekle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="@_paymentMethod" OnValidSubmit="@AddPaymentMethod">
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label class="col-form-label">Kart Numarası:</label>
                                <InputText @bind-Value="_paymentMethod.CardNumber" placeholder="0000000000000000 (16 Hane ve Rakamlardan Oluşmalı)" class="form-control" />
                                <ValidationMessage For="@(()=>_paymentMethod.CardNumber)" />
                            </div>
                            <div class="form-group">
                                <label class="col-form-label">Kart Üstündeki İsim:</label>
                                <InputText @bind-Value="_paymentMethod.CardHolderName" placeholder="İsim Soyisim" class="form-control" />
                                <ValidationMessage For="@(()=>_paymentMethod.CardHolderName)" />
                            </div>
                            <div class="form-group">
                                <label class="col-form-label">Kartın Son Kullanma Tarihi:</label>
                                <label for="CardExpirationShort">Card Expiration (MM/YY)</label>
                                <InputText @bind-Value="_paymentMethod.CardExpirationShort" placeholder="00.00" class="form-control" />
                                @*<ValidationMessage For="@(()=>_paymentMethod.CardExpirationShort)" />*@
                            </div>
                            <div class="form-group">
                                <label class="col-form-label">Kartın Güvenlik Numarası</label>
                                <InputText @bind-Value="_paymentMethod.SecurityNumber" placeholder="000 (3 Hane ve Rakamlardan Oluşmalı)" class="form-control" />
                                <ValidationMessage For="@(()=>_paymentMethod.SecurityNumber)" />
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <div class="row">
                            <div class="col-md-6">
                                <input type="button" class="profile-edit-btn" data-dismiss="modal" value="Kapat" />
                            </div>
                            <div class="col-md-6">
                                <a href="/PaymentMethods"><input type="submit" class="profile-edit-btn" @onclick="()=>AddPaymentMethod()" data-dismiss="modal" value="Ekle" /></a>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    private bool isLoggedIn = false;
    [CascadingParameter]
    IModalService Modal { get; set; }
    [Inject]
    public IJSRuntime jsRuntime { get; set; }
    [Inject]
    StateManager stateManager { get; set; }
    [Inject]
    IIdentityService identityService { get; set; }
    [Inject]
    IOrderService orderService { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }

    UserDTO _userModel { get; set; } = new UserDTO();
    PaginatedViewModel<PaymentMethod> _paymentMethodModels { get; set; } = new PaginatedViewModel<PaymentMethod>();
    List<CardType> _cardTypeModels { get; set; } = new List<CardType>();
    int selectedOption = 0;
    private int CurPage = 1;
    private int CurCardType = 0;
    PaymentMethod _paymentMethod = new PaymentMethod();

    private async void Pagination(int page, int? cardType)
    {
        CurPage = page + 1;
        if (cardType == 0)
        {
            await GetPaymentMethods(page, null);
        }
        else
        {
            await GetPaymentMethods(page, cardType);
        }
    }
    protected async Task NextPage(int? cardType)
    {
        int MaxPage = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(_paymentMethodModels.Count) / 6));
        if (CurPage < MaxPage)
        {

            CurPage++;
            if (cardType == 0)
            {
                await GetPaymentMethods(CurPage - 1, null);
            }
            else
            {
                await GetPaymentMethods(CurPage - 1, cardType);
            }
        }
    }
    protected async Task PrevPage(int? cardType)
    {
        if (CurPage > 1)
        {
            CurPage--;
            if (cardType == 0)
            {
                await GetPaymentMethods(CurPage - 1, null);
            }
            else
            {
                await GetPaymentMethods(CurPage - 1, cardType);
            }
        }
    }
    private void OptionSelected(ChangeEventArgs e)
    {
        selectedOption = Convert.ToInt32(e.Value);
    }
    protected void GetPaymentMethodByCardType()
    {
        CurCardType = selectedOption;
        Pagination(0, CurCardType);
    }
    protected async Task GetPaymentMethods(int pageIndex, int? cardType)
    {
        if (cardType == null)
        {
            //_orderModels = await orderService.GetOrdersDetailByBuyerName(_userModel.Username, 0, pageIndex);

            _paymentMethodModels = await orderService.GetPaymentMethodsDetailByBuyerName(_userModel.Username, 0, pageIndex);
        }
        else
        {
            _paymentMethodModels = await orderService.GetPaymentMethodsDetailByBuyerName(_userModel.Username, CurCardType, pageIndex);
            //_orderModels = await orderService.GetOrdersDetailByBuyerName(_userModel.Username, CurCardType, pageIndex);
        }
        await GetSearchValue();
        stateManager.UpdateContent(this, "paymentMethodPage");
    }

    public void AccessControl()
    {
        isLoggedIn = identityService.IsLoggedIn;
        if (isLoggedIn)
        {
            var stringDate = identityService.GetUserExpiration();
            DateTime loggedTime = DateTime.Parse(stringDate);
            DateTime nowDateTime = DateTime.Now;

            TimeSpan timeDifference = loggedTime - nowDateTime;

            if (timeDifference.TotalMinutes < -5)
            {
                identityService.Logout();
                isLoggedIn = identityService.IsLoggedIn;
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
        AccessControl();
        if (!isLoggedIn)
        {
            navigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
        }
        _userModel = identityService.GetUserModel(identityService.GetUserToken());
        await GetPaymentMethods(0,null);
        //_paymentMethodModels = await orderService.GetPaymentMethodsDetailByBuyerName(_userModel.Username, 0);
        //await GetSearchValue();

        //stateManager.UpdateContent(this, "paymentMethodPage");
    }
    protected async override void OnInitialized()
    {
        await jsRuntime.InvokeVoidAsync("myFunction");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("myFunction");
            stateManager.StateChanged += async (source, property) => await StateManager_StateChanged(source, property);
        }
    }
    private async Task StateManager_StateChanged(ComponentBase component, string property)
    {
        if (property.Contains("paymentMethodPage"))
        {
            await InvokeAsync(StateHasChanged);
        }

    }
    //protected async Task GetPaymentMethodByCardType()
    //{
    //    _paymentMethodModels = await orderService.GetPaymentMethodsDetailByBuyerName(_userModel.Username, selectedOption);
    //    stateManager.UpdateContent(this, "paymentMethodPage");
    //}
    protected async Task GetSearchValue()
    {
        _cardTypeModels = await orderService.GetCardTypes();
    }
    protected async Task AddPaymentMethod()
    {
        ModalParameters modalParameters = new ModalParameters();
        if (string.IsNullOrEmpty(_paymentMethod.CardNumber))
        {
            modalParameters.Add("Message", "Kart Numarası Alanı Boş Bırakılamaz.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (!Regex.IsMatch(_paymentMethod.CardNumber, @"^\d+$"))
        {
            modalParameters.Add("Message", "Kart Numarası Alanı Sadece Sayı İçermelidir.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (_paymentMethod.CardNumber.Length != 16)
        {
            modalParameters.Add("Message", "Kart Numarası Alanı 16 Haneden Oluşması Gereklidir.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (string.IsNullOrEmpty(_paymentMethod.CardHolderName))
        {

            modalParameters.Add("Message", "Kart Üstündeki İsim ve Soyisim Boş Bırakılmamalıdır.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (!Regex.IsMatch(_paymentMethod.CardHolderName, @"\s{1,2}"))
        {

            modalParameters.Add("Message", "Kart Üstündeki İsim ve Soyisim'in içinde 1 boşluk bırakılmalıdır.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (string.IsNullOrEmpty(_paymentMethod.CardExpirationShort))
        {

            modalParameters.Add("Message", "Kart Son Kullanma Tarihi Alanı Boş Bırakılamaz.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (_paymentMethod.CardExpirationShort.Length != 5 || _paymentMethod.CardExpirationShort[2] != '.' ||
        !char.IsDigit(_paymentMethod.CardExpirationShort[0]) || !char.IsDigit(_paymentMethod.CardExpirationShort[1]) ||
        !char.IsDigit(_paymentMethod.CardExpirationShort[3]) || !char.IsDigit(_paymentMethod.CardExpirationShort[4]))
        {

            modalParameters.Add("Message", "Kart Son Kullanma Tarihi MM.YY şeklinde olmalıdır. Örneğin 03.25 olmalıdır.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        var expirationMonth = Convert.ToInt32(_paymentMethod.CardExpirationShort.Substring(0, 2));
        var expirationYear = Convert.ToInt32(_paymentMethod.CardExpirationShort.Substring(_paymentMethod.CardExpirationShort.Length - 2));
        int timeNow = DateTime.Now.Year % 100;
        if (0>expirationMonth || expirationMonth>12)
        {
            modalParameters.Add("Message", "Kart Son Kullanma Tarihindeki Aylar 1-12 Arasında Olmalıdır.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (expirationYear < timeNow)
        {
            modalParameters.Add("Message", "Kart Son Kullanma Tarihindeki Yıl Şimdiki Zamandan Büyük Olmalıdır.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (string.IsNullOrEmpty(_paymentMethod.SecurityNumber))
        {

            modalParameters.Add("Message", "Kart Güvenlik Numarası Alanı Boş Bırakılamaz.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        if (!Regex.IsMatch(_paymentMethod.SecurityNumber, @"^\d+$") || _paymentMethod.SecurityNumber.Length != 3)
        {
            modalParameters.Add("Message", "Kart Güvenlik Numarası Alanı 3 Haneli Sayı İçermelidir.");
            Modal.Show<ShowMessagePopup>("Hata Mesajı", modalParameters);
            return;
        }
        var result=await orderService.AddPaymentMethodByBuyerName(_paymentMethod, _userModel.Username);

        modalParameters.Add("Message", result);
        Modal.Show<ShowMessagePopup>("Bilgilendirme", modalParameters);

        await GetPaymentMethods(0, CurCardType);
        stateManager.UpdateContent(this, "paymentMethodPage");
    }
    private async void DeletePaymentMethod(Guid paymentMethodId)
    {
        await orderService.CancelPaymentMethod(paymentMethodId,_userModel.Username);
        CurPage = 1;
        await GetPaymentMethods(0,CurCardType);
        ModalParameters modalParameters = new ModalParameters();
        modalParameters.Add("Message", "Ödeme Yöntemi Başarılı Bir Şekilde Silindi.");
        Modal.Show<ShowMessagePopup>("Bilgilendirme", modalParameters);
    }

}
