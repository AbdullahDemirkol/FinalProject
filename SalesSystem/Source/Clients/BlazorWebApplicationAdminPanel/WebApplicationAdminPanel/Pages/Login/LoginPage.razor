<section class="login">
    <div class="login_box">
        <div class="left">
            <div class="contact">
                <EditForm Model="@loginRequest" OnValidSubmit="loginProcess">
                    <h3>GIRIS YAP</h3>
                    <input @bind-value="loginRequest.UserName" type="text" placeholder="KULLANICI ADI">
                    <input @bind-value="loginRequest.Password" type="password" placeholder="SIFRE">
                    @if (showNotification)
                    {
                        <button class="submit" disabled>Giriş Yap</button>
                    }
                    else
                    {
                        <button class="submit">Giriş Yap</button>
                    }
                </EditForm>
            </div>
        </div>
        <div class="right">
            <div class="right-text">
                <h2>ADMIN PANELE HOŞGELDİNİZ!</h2>
                <h5>ADMIN GIRISI</h5>
            </div>
        </div>
    </div>
</section>
@if (showNotification)
{
    <div class="notification-container">
        <Notification IsSuccess="@isSuccess" Message="@message" />
    </div>
}
@code {
    [Inject]
    private IIdentityService _identityService { get; set; }
    private LoginRequest loginRequest = new LoginRequest("", "");
    [Inject]
    StateManager stateManager { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }

    bool isSuccess { get; set; }
    string message { get; set; }
    bool showNotification { get; set; } = false;

    private async Task loginProcess()
    {
        var result = await _identityService.Login(loginRequest.UserName, loginRequest.Password);
        if (result)
        {
            LoginNotification(result, "Giriş Başarılı. Lütfen Bekleyiniz.");
            await Task.Delay(2000);
            //var collection = HttpUtility.ParseQueryString(new Uri(navigationManager.Uri).Query);
            //string retunUrl = collection.Get("returnUrl") ?? "/";
            navigationManager.NavigateTo("/");
        }
        else
        {
            LoginNotification(result, "Giriş Başarısız.");
        }
    }
    private async void LoginNotification(bool success,string message)
    {
        isSuccess = success ;
        this.message = message;
        showNotification = true;
        await InvokeAsync(StateHasChanged);
        //stateManager.UpdateContent(this, "LoginPage");

        await Task.Delay(2000).ContinueWith(t =>
        {
            isSuccess = false;
            message = "";
            showNotification = false;
            InvokeAsync(StateHasChanged);
            //stateManager.UpdateContent(this, "LoginPage");
        });
    }

}
