@page "/orders"
<!--main content start-->
<section id="main-content">
    <section class="wrapper">
        <!-- page start-->
        <div class="row">
            <div class="col-lg-12">
                <section class="panel">
                    <header class="panel-heading">
                        <h2><strong>Sipariş Listesi</strong></h2>
                    </header>
                    @if (_orders != null)
                    {
                        <!-- order list start-->
                        <table class="table table-striped table-advance table-hover text-center">
                            <thead>
                                <tr>
                                    <th>Sipariş Numarası</th>
                                    <th>Alıcı</th>
                                    <th>Sipariş Tarihi</th>
                                    <th>Ürün Adeti Sayısı</th>
                                    <th>Sipariş Yapılan Kart </th>
                                    <th>Sipariş Edilen Ülke</th>
                                    <th>Sipariş Tutarı</th>
                                    <th>Siparişin Durumu</th>
                                    <th>Güncelle / İncele</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_orders.Data != null)
                                {
                                    @foreach (var order in _orders.Data)
                                    {
                                        <tr>
                                            <td @onclick="()=>ShowOrder(order)">@order.OrderNumber</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.BuyerName</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.Date</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.OrderItemCount()</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.PaymentMethodPrefix **** **** @order.PaymentMethodSuffix</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.Country</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.Total</td>
                                            <td @onclick="()=>ShowOrder(order)">@order.Status</td>
                                            <td>

                                                @if (order.Status != "Gönderildi" && order.Status != "Tamamlanıldı")
                                                {
                                                    <button class="btn btn-success btn-xs" @onclick="()=>ShowOrder(order)">Güncelle<i class="fa-thin fa-pen"></i></button>
                                                }
                                                else @if (order.Status == "Gönderildi" || order.Status == "Tamamlanıldı")
                                           {
                                            <button class="btn btn-primary btn-xs" @onclick="()=>ShowOrder(order)">İncele<i class="fa-thin fa-pen"></i></button>
                                        }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <!-- order list end-->
                        <!-- pagination start-->
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="pagination">
                                    @if (CurPage > 1)
                                    {
                                        @if (3 < Math.Ceiling(Convert.ToDouble(_orders.Count) / 6))
                                        {

                                            <a @onclick="() => PrevPage()">Önceki</a>
                                        }
                                        <a @onclick="() => Pagination(CurPage - 2)">@(CurPage - 1)</a>
                                    }
                                    <a class="active" @onclick="() => Pagination(CurPage - 1)">@(CurPage)</a>
                                    @if (CurPage < Math.Ceiling(Convert.ToDouble(_orders.Count) / 6))
                                    {
                                        <a @onclick="() => Pagination(CurPage)">@(CurPage + 1)</a>
                                        @if (3 < Math.Ceiling(Convert.ToDouble(_orders.Count) / 6))
                                        {
                                            <a @onclick="() => NextPage()">Sonraki</a>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <!-- pagination end-->
                    }
                    else
                    {
                        <h4>Siparişler Bulunamadı</h4>
                    }
                </section>
            </div>
        </div>
        <!-- page end-->
    </section>
</section>
<!--main content end-->



@code {
    [Inject]
    StateManager stateManager { get; set; }
    [Inject]
    IOrderService _orderService { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }

    PaginatedViewModel<OrderDTO> _orders = new PaginatedViewModel<OrderDTO>();

    private int CurPage = 1;
    protected async void Pagination(int page)
    {
        CurPage = page + 1;
        await GetOrders(0,page);
    }
    protected async void NextPage()
    {
        int MaxPage = Convert.ToInt32(Math.Round(Convert.ToDouble(_orders.Count / 3)) + 1);
        if (CurPage < MaxPage)
        {
            CurPage++;
            await GetOrders(0, CurPage - 1);
        }
    }
    protected async void PrevPage()
    {
        if (CurPage > 1)
        {
            CurPage--;
            await GetOrders(0,CurPage - 1);
        }
    }

    protected async override void OnInitialized()
    {
        await GetOrders(0,0);
        stateManager.UpdateContent(this, "orderListPage");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            stateManager.StateChanged += async (source, property) => await StateManager_StateChanged(source, property);
        }
    }
    private async Task StateManager_StateChanged(ComponentBase component, string property)
    {
        if (property == "orderListPage")
        {
            await InvokeAsync(StateHasChanged);
        }

    }


    protected async Task GetOrders(int orderStatusId,int pageIndex,int pageSize=6)
    {
        _orders = await _orderService.GetOrders(orderStatusId, pageIndex);
        SetOrderStatus(_orders);
        stateManager.UpdateContent(this, "orderListPage");
    }
    protected void SetOrderStatus(PaginatedViewModel<OrderDTO> orderDTOs)
    {
        foreach (var order in orderDTOs.Data)
        {
            if (order.Status == "islemealinildi")
            {
                order.Status = "İşleme Alınıldı";
            }
            else if (order.Status == "dogrulamabekleniyor")
            {
                order.Status = "Doğrulama Bekleniyor";
            }
            else if (order.Status == "stokonaylandi")
            {
                order.Status = "Stok Onaylandı";
            }
            else if (order.Status == "odenildi")
            {
                order.Status = "Ödenildi";
            }
            else if (order.Status == "gonderildi")
            {
                order.Status = "Gönderildi";
            }
            else if (order.Status == "tamamlanildi")
            {
                order.Status = "Tamamlanıldı";
            }
            else if (order.Status == "iptaledildi")
            {
                order.Status = "İptal Edildi";
            }
        }
    }
    public void ShowOrder(OrderDTO order)
    {
        string jsonParameter = JsonSerializer.Serialize(order);
        Uri uri = navigationManager.ToAbsoluteUri($"orderItem/{Uri.EscapeDataString(jsonParameter)}");
        navigationManager.NavigateTo(uri.ToString());
    }
}
