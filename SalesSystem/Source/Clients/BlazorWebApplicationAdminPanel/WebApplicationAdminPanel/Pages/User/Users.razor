@page "/users"
@using Microsoft.AspNetCore.Components.Forms
<!--main content start-->
<section id="main-content">
    <section class="wrapper">
        <!-- page start-->
        <div class="row">
            <div class="col-md-12">
                <button type="button" class="btn float-right btn-success" data-toggle="modal" data-target="#addUserModal">Yeni Kullanıcı Ekle<i class="fa-thin fa-plus"></i></button>
                <div class="modal fade" id="addUserModal" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="addUserModalLabel">Kullanıcı Ekle</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>

                            <form @onsubmit="@AddNewUser" enctype="multipart/form-data">
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Kullanıcı Adı</label>
                                                <input type="text" class="form-control" @bind-value="newUser.UserModel.Username" placeholder="Kullanıcı Adı" required />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Şifre</label>
                                                <input type="password" class="form-control" @bind-value="newUser.UserModel.Password" placeholder="Şifre" required />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>İsim</label>
                                                <input type="text" class="form-control" @bind-value="newUser.UserModel.FirstName" placeholder="İsim" required />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Soyisim</label>
                                                <input type="text" class="form-control" @bind-value="newUser.UserModel.LastName" placeholder="Soyisim" required />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                <label>Email Adresi</label>
                                                <input type="email" class="form-control" @bind-value="newUser.UserModel.Email" placeholder="email@hotmail.com" required />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Telefon Numarası</label>
                                                <input type="tel" class="form-control" @bind-value="newUser.UserModel.Phone" placeholder="00000000000" required />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group" style="border: 1px solid black; border-radius: 15px; padding: 15px;">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <label>Profil Resimi</label>
                                                    </div>
                                                    <div class="col-md-6 text-right">
                                                        <button class="btn btn-danger">Resimi Sil</button>
                                                    </div>
                                                </div>
                                                <div class="row text-center">
                                                    <div class="col-md-12">
                                                        <InputFile OnChange="(e) => HandleSelectedFile(e)" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label>Rolü: </label>
                                                <select @bind="role">
                                                    @foreach (var role in _roles)
                                                    {
                                                        <option value="@role.Id">@role.Name</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                                    <button type="submit" class="btn btn-success">Kullanıcı Ekle</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <section class="panel">
                    <header class="panel-heading">
                        <h2><strong>Kullanıcı Listesi</strong></h2>
                    </header>
                    @if (_users.Count != 0)
                    {
                        <table class="table table-striped table-advance table-hover text-center">
                            <thead>
                                <tr>
                                    <th>Adı</th>
                                    <th>Soyadı</th>
                                    <th>Kullanıcı Adı</th>
                                    <th>Email Adresi</th>
                                    <th>Telefon Numarası</th>
                                    <th>Yetki Düzeyi</th>
                                    <th>Aktif/Pasif</th>
                                    <th>Güncelle / Sil</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in _users.Data)
                                {
                                <tr>
                                    <td @onclick="()=>ShowUser(user)">@user.FirstName</td>
                                    <td @onclick="()=>ShowUser(user)">@user.LastName</td>
                                    <td @onclick="()=>ShowUser(user)">@user.Username</td>
                                    <td @onclick="()=>ShowUser(user)">@user.Email</td>
                                    <td @onclick="()=>ShowUser(user)">@user.Phone</td>
                                    <td @onclick="()=>ShowUser(user)">@user.Role.Name</td>
                                    @if (user.Status)
                                    {
                                        <td @onclick="()=>ShowUser(user)">Aktif</td>
                                    }
                                    else
                                    {
                                        <td @onclick="()=>ShowUser(user)">Pasif</td>
                                    }
                                    <td>
                                        <button class="btn btn-primary btn-xs" @onclick="() => UpdateUser(user)">Güncelle<i class="fa-thin fa-pen"></i></button>
                                        <button class="btn btn-danger btn-xs" @onclick="()=>DeleteUser(user.Id)">Sil<i class="fa-thin fa-trash-can"></i></button>
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="pagination">
                                    @if (CurPage > 1)
                                    {
                                        @if (3 < Math.Ceiling(Convert.ToDouble(_users.Count) / 6))
                                        {

                                            <a @onclick="() => PrevPage()">Önceki</a>
                                        }
                                        <a @onclick="() => Pagination(CurPage - 2)">@(CurPage - 1)</a>
                                    }
                                    <a class="active" @onclick="() => Pagination(CurPage - 1)">@(CurPage)</a>
                                    @if (CurPage < Math.Ceiling(Convert.ToDouble(_users.Count) / 6))
                                    {
                                        <a @onclick="() => Pagination(CurPage)">@(CurPage + 1)</a>
                                        @if (3 < Math.Ceiling(Convert.ToDouble(_users.Count) / 6))
                                        {
                                            <a @onclick="() => NextPage()">Sonraki</a>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <h4>Kullanıcılar Bulunamadı</h4>
                    }
                </section>
            </div>
        </div>
        <!-- page end-->
    </section>
</section>
<!--main content end-->


@code {
    [Inject]
    StateManager stateManager { get; set; }
    [Inject]
    IIdentityService _identityService { get; set; }
    [Inject]
    ModalManager modalManager { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }

    PaginatedViewModel<User> _users = new PaginatedViewModel<User>();
    List<Role> _roles = new List<Role>();
    UserDTO newUser = new UserDTO() { UserModel=new User() };
    int role = 1;
    bool isLoggedIn = false;

    private int CurPage = 1;
    protected void Pagination(int page)
    {
        CurPage = page + 1;
        GetUsers(page);
    }
    protected void NextPage()
    {
        int MaxPage = Convert.ToInt32(Math.Round(Convert.ToDouble(_users.Count / 3)) + 1);
        if (CurPage < MaxPage)
        {
            CurPage++;
            GetUsers(CurPage - 1);
        }
    }
    protected void PrevPage()
    {
        if (CurPage > 1)
        {
            CurPage--;
            GetUsers(CurPage - 1);
        }
    }

    public void AccessControl()
    {
        isLoggedIn = _identityService.IsLoggedIn;
        if (isLoggedIn)
        {
            var stringDate = _identityService.GetUserExpiration();
            DateTime loggedTime = DateTime.Parse(stringDate);
            DateTime nowDateTime = DateTime.Now;

            TimeSpan timeDifference = loggedTime - nowDateTime;

            if (timeDifference.TotalMinutes < -5)
            {
                navigationManager.NavigateTo($"logout");
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {
        AccessControl();
        await GetRoles();
        GetUsers(0, 6);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            stateManager.StateChanged += async (source, property) => await StateManager_StateChanged(source, property);
        }
    }
    private async Task StateManager_StateChanged(ComponentBase component, string property)
    {
        if (property == "userListPage")
        {
            await InvokeAsync(StateHasChanged);
        }

    }
    protected async Task GetRoles()
    {
        _roles = await _identityService.GetRoles();
    }
    protected async void GetUsers(int pageIndex,int pageSize=6)
    {
        _users = await _identityService.GetUsers(pageIndex, pageSize);
        stateManager.UpdateContent(this, "userListPage");
    }
    private async Task UpdateUser(User user)
    {
        var (updateUser, isUpdate, newPas) = await modalManager.UpdateUserAsync("Kullanıcı Güncelle", new UserDTO { UserModel = user, ProfilePicture = null }, _roles);
        if (updateUser != null)
        {
            if (isUpdate)
            {
                await _identityService.UpdateUser(updateUser, newPas);
            }
        }
        GetUsers(CurPage - 1);
        //if (isUpdate != null)
        //{
        //    var result = await _productService.UpdateUserItem(isUpdate);
        //    modalManager.ShowMessageAsync("Bilgilendirme", result, 2000);
        //}
        //GetProducts(CurPage - 1);
    }
    protected async void DeleteUser(int userId)
    {
        var isSuccess = await _identityService.RemoveUser(userId);
        if (isSuccess)
        {
            //pop-up gösterilicek
            GetUsers(CurPage-1);
        }
        else
        {
            //pop-up gösterilicek
        }
    }

    private void ShowUser(User user)
    {
        modalManager.ShowUserItem("Bilgilendirme", user);
    }
    //private void OnPriceChanged(string value)
    //{
    //    decimal.TryParse(value, out decimal price);
    //    if (price != 0)
    //    {
    //        newProduct.Price = price;
    //    }
    //}

    //private async Task<IFormFile> ConvertToIFormFile(IBrowserFile file)
    //{
    //    using var ms = new MemoryStream();
    //    await file.OpenReadStream().CopyToAsync(ms);

    //    var convertedFile = new FormFile(
    //        baseStream: ms,
    //        baseStreamOffset: 0,
    //        length: ms.Length,
    //        name: file.Name,
    //        fileName: file.Name)
    //    {
    //        Headers = new HeaderDictionary(),
    //        ContentType = file.ContentType
    //    };

    //    return convertedFile;
    //}
    //protected void ClearNewUser()
    //{
    //    formFiles = new List<IBrowserFile>();
    //    //newUser = new User();
    //}
    private async void HandleSelectedFile(InputFileChangeEventArgs e)
    {
        newUser.ProfilePicture = await GetFileBytesAsync(e.File);
    }
    private async Task<byte[]> GetFileBytesAsync(IBrowserFile formFile)
    {
        try
        {
            var buffer = new byte[16 * 1024]; // 16KB'lık bir buffer tanımlıyoruz.
            using (var ms = new MemoryStream())
            {
                var stream = formFile.OpenReadStream();
                int read;
                while ((read = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await ms.WriteAsync(buffer, 0, read);
                }
                return ms.ToArray();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void AddNewUser()
    {
        if (role==0)
        {
            role = 1;
        }
        newUser.UserModel.Status = true;
        var result = await _identityService.AddUser(newUser, role);
        if (result)
        {
            //newUserPictureFiles =new ;
            newUser = new UserDTO() {UserModel=new User()};
            GetUsers(CurPage-1);
            //pop-up gösterilicek
        }
    }
}
